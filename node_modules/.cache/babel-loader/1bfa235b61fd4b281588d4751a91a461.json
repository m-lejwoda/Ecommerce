{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Michal\\\\django-react-boilerplate\\\\src\\\\containers\\\\Payments.js\";\nimport { useState } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport \"../css/payments.min.css\";\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js'; // Custom styling can be passed to options when creating an Element.\n\nconst CARD_ELEMENT_OPTIONS = {\n  style: {\n    base: {\n      color: '#32325d',\n      fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n      fontSmoothing: 'antialiased',\n      fontSize: '16px',\n      '::placeholder': {\n        color: '#aab7c4'\n      }\n    },\n    invalid: {\n      color: '#fa755a',\n      iconColor: '#fa755a'\n    }\n  }\n};\n\nconst CheckoutForm = () => {\n  const [error, setError] = useState(null);\n  const stripe = useStripe();\n  const elements = useElements(); // Handle real-time validation errors from the card Element.\n\n  const handleChange = event => {\n    if (event.error) {\n      setError(event.error.message);\n    } else {\n      setError(null);\n    }\n  }; // Handle form submission.\n\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const card = elements.getElement(CardElement);\n    const result = await stripe.createToken(card);\n\n    if (result.error) {\n      // Inform the user if there was an error.\n      setError(result.error.message);\n    } else {\n      setError(null); // Send the token to your server.\n\n      stripeTokenHandler(result.token);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"form-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"card-element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Credit or debit card\"), /*#__PURE__*/React.createElement(CardElement, {\n    id: \"card-element\",\n    options: CARD_ELEMENT_OPTIONS,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-errors\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, error)), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Submit Payment\"));\n}; // Setup Stripe.js and the Elements provider\n\n\nconst stripePromise = loadStripe('pk_test_EsHEu4kQeXtUp2or3usiLzuu00MbZjNI5d');\n\nconst App = () => {\n  return /*#__PURE__*/React.createElement(Elements, {\n    stripe: stripePromise,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CheckoutForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }));\n}; // POST the token ID to your backend.\n\n\nasync function stripeTokenHandler(token) {\n  const response = await fetch('/charge', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      token: token.id\n    })\n  });\n  return response.json();\n}","map":{"version":3,"sources":["C:/Users/Michal/django-react-boilerplate/src/containers/Payments.js"],"names":["useState","loadStripe","CardElement","Elements","useElements","useStripe","CARD_ELEMENT_OPTIONS","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","CheckoutForm","error","setError","stripe","elements","handleChange","event","message","handleSubmit","preventDefault","card","getElement","result","createToken","stripeTokenHandler","token","stripePromise","App","response","fetch","method","headers","body","JSON","stringify","id","json"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport \"../css/payments.min.css\"\r\nimport {\r\n  CardElement,\r\n  Elements,\r\n  useElements,\r\n  useStripe\r\n} from '@stripe/react-stripe-js';\r\n\r\n// Custom styling can be passed to options when creating an Element.\r\nconst CARD_ELEMENT_OPTIONS = {\r\n  style: {\r\n    base: {\r\n      color: '#32325d',\r\n      fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\r\n      fontSmoothing: 'antialiased',\r\n      fontSize: '16px',\r\n      '::placeholder': {\r\n        color: '#aab7c4'\r\n      }\r\n    },\r\n    invalid: {\r\n      color: '#fa755a',\r\n      iconColor: '#fa755a'\r\n    }\r\n  }\r\n};\r\n\r\nconst CheckoutForm = () => {\r\n  const [error, setError] = useState(null);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  // Handle real-time validation errors from the card Element.\r\n  const handleChange = (event) => {\r\n    if (event.error) {\r\n      setError(event.error.message);\r\n    } else {\r\n      setError(null);\r\n    }\r\n  }\r\n\r\n  // Handle form submission.\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const card = elements.getElement(CardElement);\r\n    const result = await stripe.createToken(card)\r\n    if (result.error) {\r\n      // Inform the user if there was an error.\r\n      setError(result.error.message);\r\n    } else {\r\n      setError(null);\r\n      // Send the token to your server.\r\n      stripeTokenHandler(result.token);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div class=\"form-row\">\r\n        <label for=\"card-element\">\r\n          Credit or debit card\r\n        </label>\r\n        <CardElement\r\n          id=\"card-element\"\r\n          options={CARD_ELEMENT_OPTIONS}\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"card-errors\" role=\"alert\">{error}</div>\r\n      </div>\r\n      <button type=\"submit\">Submit Payment</button>\r\n    </form>\r\n  );\r\n}\r\n\r\n// Setup Stripe.js and the Elements provider\r\nconst stripePromise = loadStripe('pk_test_EsHEu4kQeXtUp2or3usiLzuu00MbZjNI5d');\r\n\r\nconst App = () => {\r\n  return (\r\n    <Elements stripe={stripePromise}>\r\n      <CheckoutForm />\r\n    </Elements>\r\n  );\r\n}\r\n\r\n\r\n// POST the token ID to your backend.\r\nasync function stripeTokenHandler(token) {\r\n  const response = await fetch('/charge', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({token: token.id})\r\n  });\r\n\r\n  return response.json();\r\n}"]},"metadata":{},"sourceType":"module"}